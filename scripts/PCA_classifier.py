"""
- Reads in the MNIST dataset after PCA (generated by PCA.py)
- try a classifier purely based on the first  PCA component (threshold)
"""

import numpy as np
import h5py
from pathlib import Path
import matplotlib.pyplot as plt

if __name__ == "__main__":
    folder = Path("data") / "MNIST_PCA4"
    filename_train = folder / "mnist_pca4_train.h5"

    with h5py.File(filename_train, "r") as f:
        X = f["X_pca"][:]
        y = f["y"][:]

    print(X.shape, y.shape)

    # only y = 1 or y = 5
    mask = (y == 1) | (y == 5)
    X = X[mask]
    y = y[mask]
    print(X.shape, y.shape)

    # find best threshold for the first PCA component
    X_first_component = X[:, 0]
    thresholds = np.linspace(X_first_component.min(), X_first_component.max(), 100)
    threshold_accuracies = [0]
    threshold_best = 0
    for threshold in thresholds:
        classification = (X_first_component < threshold).astype(int)
        accuracy = np.mean(classification == (y == 1).astype(int))
        if accuracy > max(threshold_accuracies):
            threshold_best = threshold
        threshold_accuracies.append(accuracy)

    print(f"Best threshold: {threshold_best}")
    print(f"Accuracy: {max(threshold_accuracies)}")

    mask1 = y == 1
    mask5 = y == 5
    X1 = X[mask1]
    X5 = X[mask5]
    # histogram of the first PCA component
    plt.hist(X1[:, 0], bins=50, alpha=0.5, label="y = 1")
    plt.hist(X5[:, 0], bins=50, alpha=0.5, label="y = 5")
    plt.axvline(
        threshold_best,
        color="red",
        linestyle="--",
        label="Best Threshold at {:.2f}".format(threshold_best),
    )
    plt.xlabel("First PCA Component")
    plt.ylabel("Frequency")
    plt.title(
        f"Histogram of First PCA Component, accuracy: {max(threshold_accuracies):.2f}"
    )
    plt.legend()
    plt.show()
